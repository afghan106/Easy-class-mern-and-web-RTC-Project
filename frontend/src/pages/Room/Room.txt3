import React, { useState, useRef, useEffect } from 'react';
import './styles.css';

const members = [
  { name: 'Sulammita' },
  { name: 'Dennis Ivy' },
  { name: 'Shahriar P. Shuvo ðŸ‘‹' },
  { name: 'Sulammita' },
  { name: 'Dennis Ivy' },
  { name: 'Shahriar P. Shuvo ðŸ‘‹' },
  { name: 'Sulammita' },
  { name: 'Dennis Ivy' },
  { name: 'Shahriar P. Shuvo ðŸ‘‹' },
  { name: 'Sulammita' },
  { name: 'Dennis Ivy' },
  { name: 'Shahriar P. Shuvo ðŸ‘‹' },
];

const messages = [
  { author: 'ðŸ¤– Mumble Bot', text: "Welcome to the room, Don't be shy, say hello!", bot: true },
  { author: 'ðŸ¤– Mumble Bot', text: "Dennis Ivy just entered the room!", bot: true },
  { author: 'Dennis Ivy', text: "Does anyone know when he will be back?", bot: false },
  { author: 'ðŸ¤– Mumble Bot', text: "Sulamita just entered the room!", bot: true },
  { author: 'ðŸ¤– Mumble Bot', text: "Shahriar P. Shuvo just entered the room!", bot: true },
  { author: 'Sulamita', text: "Great stream!", bot: false },
  { author: 'Dennis Ivy', text: "Convert RGB color codes to HEX HTML format for use in web design and CSS.", bot: false },
  { author: 'Shahriar P. Shuvo ðŸ‘‹', text: "Does anyone know when he will be back?", bot: false },
  { author: 'Sulamita', text: "Great stream!", bot: false },
  { author: 'Dennis Ivy', text: "Convert RGB color codes to HEX HTML format for use in web design and CSS.", bot: false },
  { author: 'Shahriar P. Shuvo ðŸ‘‹', text: "Does anyone know when he will be back?", bot: false },
  { author: 'Sulamita', text: "Great stream!", bot: false },
  { author: 'Dennis Ivy', text: "Convert RGB color codes to HEX HTML format for use in web design and CSS.", bot: false },
  { author: 'Shahriar P. Shuvo ðŸ‘‹', text: "Does anyone know when he will be back?", bot: false },
  { author: 'ðŸ¤– Mumble Bot', text: "ðŸ‘‹ Sulamita has left the room", bot: true },
];

const Room = () => {
  const [showMembers, setShowMembers] = useState(true);
  const [showChat, setShowChat] = useState(true);
  const messagesRef = useRef(null);

  useEffect(() => {
    if (messagesRef.current) {
      messagesRef.current.scrollTop = messagesRef.current.scrollHeight;
    }
  }, []);

  const handleToggleMembers = () => setShowMembers((s) => !s);
  const handleToggleChat = () => setShowChat((s) => !s);

  return (
    <div>
      

      <main className="container">
        <div id="room__container">
          {/* Members */}
          {showMembers && (
            <section id="members__container">
              <div id="members__header">
                <p>Participants</p>
                <strong id="members__count">{members.length}</strong>
              </div>
              <div id="member__list">
                {members.map((member, idx) => (
                  <div className="member__wrapper" key={idx}>
                    <span className="green__icon"></span>
                    <p className="member_name">{member.name}</p>
                  </div>
                ))}
              </div>
            </section>
          )}

          {/* Stream Actions */}
          <section id="stream__container">
            <div className="stream__actions">
              <button>
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                  <path d="M5 4h-3v-1h3v1zm10.93 0l.812 1.219c.743 1.115 1.987 1.781 3.328 1.781h1.93v13h-20v-13h3.93c1.341 0 2.585-.666 3.328-1.781l.812-1.219h5.86zm1.07-2h-8l-1.406 2.109c-.371.557-.995.891-1.664.891h-5.93v17h24v-17h-3.93c-.669 0-1.293-.334-1.664-.891l-1.406-2.109zm-11 8c0-.552-.447-1-1-1s-1 .448-1 1 .447 1 1 1 1-.448 1-1zm7 0c1.654 0 3 1.346 3 3s-1.346 3-3 3-3-1.346-3-3 1.346-3 3-3zm0-2c-2.761 0-5 2.239-5 5s2.239 5 5 5 5-2.239 5-5-2.239-5-5-5z" />
                </svg>
              </button>
              <button className="active">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                  <path d="M12 2c1.103 0 2 .897 2 2v7c0 1.103-.897 2-2 2s-2-.897-2-2v-7c0-1.103.897-2 2-2zm0-2c-2.209 0-4 1.791-4 4v7c0 2.209 1.791 4 4 4s4-1.791 4-4v-7c0-2.209-1.791-4-4-4zm8 9v2c0 4.418-3.582 8-8 8s-8-3.582-8-8v-2h2v2c0 3.309 2.691 6 6 6s6-2.691 6-6v-2h2zm-7 13v-2h-2v2h-4v2h10v-2h-4z" />
                </svg>
              </button>
              <button>
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                  <path d="M0 1v17h24v-17h-24zm22 15h-20v-13h20v13zm-6.599 4l2.599 3h-12l2.599-3h6.802z" />
                </svg>
              </button>
              <button>
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                  <path d="M16 10v-5l8 7-8 7v-5h-8v-4h8zm-16-8v20h14v-2h-12v-16h12v-2h-14z" />
                </svg>
              </button>
            </div>
          </section>

          {/* Chat */}
          {showChat && (
            <section id="messages__container">
              <div id="messages" ref={messagesRef}>
                {messages.map((msg, idx) => (
                  <div className="message__wrapper" key={idx}>
                    <div className={msg.bot ? "message__body__bot" : "message__body"}>
                      <strong className={msg.bot ? "message__author__bot" : "message__author"}>
                        {msg.author}
                      </strong>
                      <p className={msg.bot ? "message__text__bot" : "message__text"}>
                        {msg.text}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
              <form id="message__form" onSubmit={e => e.preventDefault()}>
                <input type="text" name="message" placeholder="Send a message...." />
              </form>
            </section>
          )}
        </div>
      </main>
    </div>
  );
};

export default Room;




.container {
  margin-top: 74px;
  height: clac(100vh - 74px);
  width: 100%;
  position: relative;
}

#room__container {
  position: relative;
  display: flex;
  gap: 3rem;
}

#members__container {
  background-color: #262625;
  border-right: 1px solid #797a79;
  overflow-y: auto;
  width: 90%;
  max-width: 250px;
  position: fixed;
  height: 100%;
  z-index: 999;
}

#members__count {
  background-color: #1d1d1c;
  padding: 7px 15px;
  font-size: 14px;
  font-weight: 600;
  border-radius: 5px;
}

#members__header {
  display: flex;
  justify-content: space-around;
  align-items: center;
  padding: 0 1rem;
  position: fixed;
  font-size: 18px;
  background-color: #323143;
  width: 218px;
}

#member__list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  padding-top: 5rem;
  padding-bottom: 6.5rem;
}

.members__list::-webkit-scrollbar {
  height: 14px;
}

.member__wrapper {
  display: flex;
  align-items: center;
  column-gap: 10px;
  padding-left: 1em;
}

.green__icon {
  display: block;
  height: 8px;
  width: 8px;
  border-radius: 50%;
  background-color: #2aca3e;
}

.member_name{
  font-size: 14px;
  line-height: 0;
}

#messages__container {
  height: calc(100vh - 85px);
  background-color: #262625;
  right: 0;
  position: absolute;
  width: 100%;
  max-width: 25rem;
  overflow-y: auto;
  border-left: 1px solid #111;
}

#messages {
  width: 100%;
  height: 100%;
  overflow-y: auto;
}

.message__wrapper:last-child {
  margin-bottom: 6.5rem;
}

.message__wrapper {
  display: flex;
  gap: 10px;
  margin: 1em;
}

.message__body {
  background-color: #363739;
  border-radius: 10px;
  padding: 10px 15px;
  width: fit-content;
  max-width: 900px;
}

.message__body strong {
  font-weight: 600;
  color: #ede0e0;
}

.message__body__bot{
  padding: 0 20px;
  max-width: 900px;
  color: #bdbdbd;
}


.message__author {
  margin-right: 10px;
  color: #2aca3e!important;

}

.message__author__bot {
  margin-right: 10px;
  color: #a52aca!important;

}

.message__text {
  margin: 0;
}

#message__form {
  width: 23.2rem;
  position: fixed;
  bottom: 0;
  display: block;
  background-color: #1a1a1a;
  padding: 1em;
}

#message__form input {
  color: #fff;
  width: 100%;
  border: none;
  border-radius: 5px;
  padding: 18px;
  font-size: 14px;
  box-sizing: border-box;
  background-color: #3f434a;
}

#message__form input:focus {
  outline: none;
}

#message__form input::placeholder {
  color: #707575;
}

#stream__container {
  justify-self: center;
  width: calc(100% - 40.7rem);
  position: fixed;
  left: 15.7rem;
  top: clac(100vh - 72px);
  overflow-y: auto;
  height: 100%;
}


@media (max-width: 1200px) {
  #members__container {
    display: none;
  }

  #members__button {
    display: block;
  }

  #stream__container {
    width: calc(100% - 25rem);
    left: 0;
  }
}

@media (max-width: 980px) {
  #stream__container {
    width: calc(100% - 20rem);
    left: 0;
  }
  #messages__container {
    max-width: 20rem;
  }

  #message__form {
    width: 18.2rem;
  }
}

@media (max-width: 768px) {
  #stream__container {
    width: 100%;
  }

  #messages__container {
    display: none;
  }

  #chat__button {
    display: block;
  }
}

#stream__box {
  position: relative;
}

.stream__focus {
  width: 100%;
  height: 100%;
}

.stream__focus iframe {
  width: 100%;
  height: 100%;
}

.stream__actions {
  position: fixed;
  bottom: 1rem;
  border-radius: 8px;
  background-color: #1a1a1a60;
  padding: 1rem;
  left: 50%;
  display: flex;
  gap: 1rem;
  transform: translateX(-50%);
}

.stream__actions a,
.stream__actions button {
  cursor: pointer;
  background-color: #262625;
  color: #fff;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0.5rem 1rem;
  border-radius: 5px;
  transition: all 0.2s ease-in-out;
}

.stream__actions a svg,
.stream__actions button svg {
  width: 1.5rem;
  height: 1.5rem;
  fill: #ede0e0;
}

.stream__actions a.active,
.stream__actions button.active,
.stream__actions a:hover,
.stream__actions button:hover {
  background-color: #845695;
}
